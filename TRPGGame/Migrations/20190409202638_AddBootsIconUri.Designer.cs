// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TRPGGame.Data;

namespace TRPGGame.Migrations
{
    [DbContext(typeof(WorldEntityDbContext))]
    [Migration("20190409202638_AddBootsIconUri")]
    partial class AddBootsIconUri
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TRPGGame.Entities.WorldEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentMapId");

                    b.Property<string>("Name");

                    b.Property<Guid>("OwnerGuid");

                    b.HasKey("Id");

                    b.ToTable("PlayerEntities");
                });

            modelBuilder.Entity("TRPGGame.Entities.WorldEntity", b =>
                {
                    b.OwnsOne("TRPGGame.Entities.Data.CharacterIconSet", "IconUris", b1 =>
                        {
                            b1.Property<int>("WorldEntityId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("BaseIconUri");

                            b1.Property<string>("BodyIconUri");

                            b1.Property<string>("BootsIconUri");

                            b1.Property<string>("CloakIconUri");

                            b1.Property<string>("ExtraIconUri");

                            b1.Property<string>("GlovesIconUri");

                            b1.Property<string>("HairIconUri");

                            b1.Property<string>("HeadIconUri");

                            b1.Property<string>("LeftHandIconUri");

                            b1.Property<string>("LegsIconUri");

                            b1.Property<string>("RightHandIconUri");

                            b1.ToTable("PlayerEntities");

                            b1.HasOne("TRPGGame.Entities.WorldEntity")
                                .WithOne("IconUris")
                                .HasForeignKey("TRPGGame.Entities.Data.CharacterIconSet", "WorldEntityId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("TRPGShared.Coordinate", "Position", b1 =>
                        {
                            b1.Property<int?>("WorldEntityId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("PositionX")
                                .HasColumnName("PositionX");

                            b1.Property<int>("PositionY")
                                .HasColumnName("PositionY");

                            b1.ToTable("PlayerEntities");

                            b1.HasOne("TRPGGame.Entities.WorldEntity")
                                .WithOne("Position")
                                .HasForeignKey("TRPGShared.Coordinate", "WorldEntityId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
